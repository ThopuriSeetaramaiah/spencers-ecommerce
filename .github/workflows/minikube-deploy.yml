name: Build and Deploy to Minikube

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

jobs:
  build-frontend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        cache-dependency-path: frontend/package-lock.json
    
    - name: Install dependencies
      run: |
        cd frontend
        npm ci || npm install
    
    - name: Build frontend
      run: |
        cd frontend
        npm run build
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push frontend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./frontend
        push: true
        tags: ghcr.io/${{ github.repository }}/frontend:latest
    
    - name: Upload frontend build artifact
      uses: actions/upload-artifact@v4
      with:
        name: frontend-build
        path: frontend/build

  build-backend:
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven
    
    - name: Build with Maven
      run: |
        cd backend
        ./mvnw clean package -DskipTests
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
    
    - name: Login to GitHub Container Registry
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
    
    - name: Build and push backend Docker image
      uses: docker/build-push-action@v5
      with:
        context: ./backend
        push: true
        tags: ghcr.io/${{ github.repository }}/backend:latest
    
    - name: Upload backend build artifact
      uses: actions/upload-artifact@v4
      with:
        name: backend-build
        path: backend/target/*.jar

  deploy-to-minikube:
    needs: [build-frontend, build-backend]
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4
    
    - name: Start Minikube
      uses: medyagh/setup-minikube@master
    
    - name: Get minikube IP
      id: minikube-ip
      run: echo "ip=$(minikube ip)" >> $GITHUB_OUTPUT
    
    - name: Update Kubernetes manifests
      run: |
        sed -i "s|spencers/frontend:latest|ghcr.io/${{ github.repository }}/frontend:latest|g" k8s/frontend-deployment.yaml
        sed -i "s|spencers/backend:latest|ghcr.io/${{ github.repository }}/backend:latest|g" k8s/backend-deployment.yaml
    
    - name: Create MySQL Secret
      run: |
        kubectl create secret generic mysql-secret --from-literal=password=spencers-password || true
    
    - name: Deploy to Minikube
      run: |
        kubectl apply -f k8s/mysql-deployment.yaml
        kubectl apply -f k8s/backend-deployment.yaml
        kubectl apply -f k8s/frontend-deployment.yaml
    
    - name: Wait for deployments
      run: |
        kubectl rollout status deployment/mysql
        kubectl rollout status deployment/spencers-backend
        kubectl rollout status deployment/spencers-frontend
    
    - name: Get service URLs
      run: |
        echo "Frontend URL: http://${{ steps.minikube-ip.outputs.ip }}:$(kubectl get service spencers-frontend -o jsonpath='{.spec.ports[0].nodePort}')"
        echo "Backend URL: http://${{ steps.minikube-ip.outputs.ip }}:$(kubectl get service spencers-backend -o jsonpath='{.spec.ports[0].nodePort}')"
